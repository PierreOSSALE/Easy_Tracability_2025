// EASY-TRACABILITY: backend/server.ts
import app from "./src/app";
import sequelize from "./src/config/database";
import { seedUsers } from "./src/seeders/user.seeder";
import { seedProducts } from "./src/seeders/product.seeder";
import { seedTransactions } from "./src/seeders/transaction.seeder";
import { seedInventoryMovements } from "./src/seeders/inventoryMovement.seeder";
import { UserModel } from "./src/models/associations";
import { ProductModel } from "./src/models/product";

const port = app.get("port");

app.listen(port, async () => {
  console.log(`Le serveur √©coute sur le port: http://localhost:${port}`);
  try {
    await sequelize.authenticate();
    // Utilise force: true ou alter: true selon ton besoin. Ici force: true recr√©e les tables.
    await sequelize.sync({ force: true });
    console.log("Connexion √† la base de donn√©es r√©ussie.");

    // Appel de tous les seeders
    await seedUsers();
    await seedProducts();

    // R√©cup√®re un utilisateur et un produit pour alimenter les autres seeders
    const user = await UserModel.findOne();
    const product = await ProductModel.findOne();

    if (user && product) {
      await seedInventoryMovements(user.uuid, product.uuid);
      // Optionnel : r√©p√©ter pour simuler diff√©rents mouvements ou transactions
      await seedInventoryMovements(user.uuid, product.uuid);
      await seedTransactions();
    }

    console.log("üå± Toutes les tables ont √©t√© remplies !");
  } catch (error) {
    console.error("√âchec de la connexion √† la base de donn√©es:", error);
  }
});
